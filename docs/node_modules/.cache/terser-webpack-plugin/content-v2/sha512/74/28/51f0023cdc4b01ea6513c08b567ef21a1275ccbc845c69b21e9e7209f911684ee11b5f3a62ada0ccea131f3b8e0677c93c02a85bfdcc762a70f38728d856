{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{123:function(t,e,o){\"use strict\";o.r(e),o.d(e,\"frontMatter\",(function(){return r})),o.d(e,\"metadata\",(function(){return u})),o.d(e,\"rightToc\",(function(){return s})),o.d(e,\"default\",(function(){return b}));var i=o(2),n=o(6),a=(o(0),o(132)),l=o(136),r={id:\"run_nautilus\",title:\"Run Nautilus without Autonomous Loop Closure\"},u={id:\"run_nautilus\",title:\"Run Nautilus without Autonomous Loop Closure\",description:\"For this tutorial we will be using the [bag file here](https://drive.google.com/open?id=1thDp4MJF6l2yZ9Z_JFAmdhMQZrld0oQ5). Download it and put it in ```nautilus/data```. You will have to create this folder.\",source:\"@site/docs/run_nautilus.mdx\",permalink:\"/nautilus_docs/docs/run_nautilus\",editUrl:\"https://github.com/facebook/docusaurus/edit/master/website/docs/run_nautilus.mdx\",sidebar:\"sidebar\",previous:{title:\"Install RViz Controls\",permalink:\"/nautilus_docs/docs/install_rviz_controls\"},next:{title:\"Vectorize Map\",permalink:\"/nautilus_docs/docs/vectorize\"}},s=[],c={rightToc:s};function b(t){var e=t.components,o=Object(n.a)(t,[\"components\"]);return Object(a.b)(\"wrapper\",Object(i.a)({},c,o,{components:e,mdxType:\"MDXLayout\"}),Object(a.b)(\"p\",null,\"For this tutorial we will be using the \",Object(a.b)(\"a\",Object(i.a)({parentName:\"p\"},{href:\"https://drive.google.com/open?id=1thDp4MJF6l2yZ9Z_JFAmdhMQZrld0oQ5\"}),\"bag file here\"),\". Download it and put it in \",Object(a.b)(\"inlineCode\",{parentName:\"p\"},\"nautilus/data\"),\". You will have to create this folder.\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",Object(i.a)({parentName:\"pre\"},{}),\"cd nautilus\\nmkdir data\\nmv ~/Downloads/<bag_file_name> data/\\n\")),Object(a.b)(\"p\",null,\"You should spawn three terminal windows or tabs for the following commands. In the first window or tab start up ROS.\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",Object(i.a)({parentName:\"pre\"},{}),\"roscore\\n\")),Object(a.b)(\"p\",null,\"In the second window or tab start up RViz so we can see what is going on:\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",Object(i.a)({parentName:\"pre\"},{}),\"rviz -d slam_debug.rviz\\n\")),Object(a.b)(\"p\",null,\"In the third window or tab start nautilus and point it towards the config file for that bag file.\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",Object(i.a)({parentName:\"pre\"},{}),\"./bin/nautilus --config_file config/lgrc_bag_file.lua\\n\")),Object(a.b)(\"p\",null,\"Then you will have to wait until that third window outputs \",Object(a.b)(\"inlineCode\",{parentName:\"p\"},\"Waiting for Loop Closure input.\"),\", this means that nautilus is ready for you to fix any errors that it may have made. For example here is what the LRGC Bag looks like after running through the initial optimization.\"),Object(a.b)(\"img\",{alt:\"Nautilus Pre-Loop Closure\",src:Object(l.a)(\"img/LGRC_Nautilus.png\")}),Object(a.b)(\"p\",null,'We can see this isn\\'t perfect, the hallway on the left side is still not connected totally. To fix this we are going to use the Human in the Loop tool offered in nautilus. Click the \"Hitl Slam Tool\" Button that should be on your RViz toolbar. It looks like this:'),Object(a.b)(\"img\",{alt:\"HITL Button\",src:Object(l.a)(\"img/HITL_slam_button.png\")}),Object(a.b)(\"p\",null,\"After clicking that you will \",Object(a.b)(\"strong\",{parentName:\"p\"},\"not\"),\" be able to move your camera. You can hit ESC to cancel the operation to get your camera into a better position if needed. From here you will have to draw two lines on the points that are supposed to be in the same place. This allows nautilus to slide the walls along each other until they are correct.\"),Object(a.b)(\"p\",null,\"After you do that you should see something like this as the final results:\"),Object(a.b)(\"img\",{alt:\"Nautilus Post-Loop Closure\",src:Object(l.a)(\"img/LGRC_Nautilus_Finished.png\")}))}b.isMDXComponent=!0}}]);","extractedComments":[]}