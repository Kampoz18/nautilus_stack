{"remainingRequest":"/home/jack/catkin_ws/src/nautilus_stack/docs/node_modules/babel-loader/lib/index.js??ref--7-1!/home/jack/catkin_ws/src/nautilus_stack/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/home/jack/catkin_ws/src/nautilus_stack/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/home/jack/catkin_ws/src/nautilus_stack/docs/docs/write_config.mdx","dependencies":[{"path":"/home/jack/catkin_ws/src/nautilus_stack/docs/docs/write_config.mdx","mtime":1605820791455},{"path":"/home/jack/catkin_ws/src/nautilus_stack/docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-write-config-mdx-3e5.json","mtime":1605820922821},{"path":"/home/jack/catkin_ws/src/nautilus_stack/docs/node_modules/cache-loader/dist/cjs.js","mtime":1605820792107},{"path":"/home/jack/catkin_ws/src/nautilus_stack/docs/node_modules/babel-loader/lib/index.js","mtime":1605820791935},{"path":"/home/jack/catkin_ws/src/nautilus_stack/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1605820791575},{"path":"/home/jack/catkin_ws/src/nautilus_stack/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1605820791607}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}