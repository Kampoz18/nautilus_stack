{"remainingRequest":"/home/jack/Dev/Lab/nautilus_docs/node_modules/babel-loader/lib/index.js??ref--7-1!/home/jack/Dev/Lab/nautilus_docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/home/jack/Dev/Lab/nautilus_docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/home/jack/Dev/Lab/nautilus_docs/docs/write_config.mdx","dependencies":[{"path":"/home/jack/Dev/Lab/nautilus_docs/docs/write_config.mdx","mtime":1599934778387},{"path":"/home/jack/Dev/Lab/nautilus_docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-write-config-mdx-3e5.json","mtime":1605820471114},{"path":"/home/jack/Dev/Lab/nautilus_docs/node_modules/cache-loader/dist/cjs.js","mtime":1589378163772},{"path":"/home/jack/Dev/Lab/nautilus_docs/node_modules/babel-loader/lib/index.js","mtime":1589378163765},{"path":"/home/jack/Dev/Lab/nautilus_docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1589378167853},{"path":"/home/jack/Dev/Lab/nautilus_docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1589378166669}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}